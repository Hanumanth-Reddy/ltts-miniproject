        -:    0:Source:test/test_calculator_operations.c
        -:    0:Programs:3
        -:    1:#include "unity.h"
        -:    2:#include "calculator_operations.h"
        -:    3:#define PROJECT_NAME    "Calculator"
        -:    4:calculate testcal={10,5};
        -:    5:trigonometric testo={4};
        -:    6:calculate testcal1={3,2},testdiv0={3,0};
        -:    7:trigonometric testo1={6};
        -:    8:trigonometric testf1={0};
        -:    9:trigonometric testf2={-5};
        -:   10:/* Prototypes for all the test functions */
        -:   11:void test_sum(void);
        -:   12:void test_substraction(void);
        -:   13:void test_multiplication(void);
        -:   14:void test_division(void);
        -:   15:void test_exponent(void);
        -:   16:void test_factorial(void);
        -:   17:void test_root(void);
        -:   18:void test_power(void);
        -:   19:void test_sine(void);
        -:   20:void test_cosine(void);
        -:   21:void test_ttan(void);
        -:   22:void test_sec(void);
        -:   23:void test_cosec(void);
        -:   24:void test_cot(void);
        -:   25:void test_zero_factorial(void);
        -:   26:void test_negative_factorial(void);
        -:   27:void test_division_byZero(void);
        -:   28:/* Required by the unity test framework */
       17:   29:void setUp(){}
------------------
setUp:
------------------
setUp:
------------------
        -:   30:/* Required by the unity test framework */
       17:   31:void tearDown(){}
------------------
tearDown:
------------------
tearDown:
------------------
        -:   32:
        -:   33:/* Start of the application test */
        1:   34:int main()
        -:   35:{
        -:   36:/* Initiate the Unity Test Framework */
        1:   37:  UNITY_BEGIN();
        -:   38:
        -:   39:/* Run Test functions */
        1:   40:  RUN_TEST(test_sum);
        1:   41:  RUN_TEST(test_substraction);
        1:   42:  RUN_TEST(test_multiplication);
        1:   43:  RUN_TEST(test_division);
        1:   44:  RUN_TEST(test_division_byZero);
        1:   45:  RUN_TEST(test_root);
        1:   46:  RUN_TEST(test_power);
        1:   47:  RUN_TEST(test_exponent);
        1:   48:  RUN_TEST(test_factorial);
        1:   49:  RUN_TEST(test_zero_factorial);
        1:   50:  RUN_TEST(test_negative_factorial);
        1:   51:  RUN_TEST(test_sine);
        1:   52:  RUN_TEST(test_cosine);
        1:   53:  RUN_TEST(test_ttan);
        1:   54:  RUN_TEST(test_cosec);
        1:   55:  RUN_TEST(test_sec);
        1:   56:  RUN_TEST(test_cot);
        -:   57:  
        -:   58:
        -:   59:  /* Close the Unity Test Framework */
        1:   60:  return UNITY_END();
        -:   61:}
------------------
main:
------------------
main:
------------------
        -:   62:
        -:   63:/* all test functions */ 
        1:   64:void test_sum(void) {
        1:   65:  TEST_ASSERT_EQUAL(15,sum(&testcal));
        1:   66:   TEST_ASSERT_EQUAL(5,sum(&testcal1));
        1:   67:}
------------------
test_sum:
------------------
test_sum:
------------------
        1:   68:void test_substraction(void) {
        1:   69:  TEST_ASSERT_EQUAL(5,substraction(&testcal));
        1:   70:  TEST_ASSERT_EQUAL(1,substraction(&testcal1));
        1:   71:}
------------------
test_substraction:
------------------
test_substraction:
------------------
        1:   72:void test_multiplication(void) {
        1:   73:  TEST_ASSERT_EQUAL(50,multiplication(&testcal));
        1:   74:  TEST_ASSERT_EQUAL(6,multiplication(&testcal1));
        1:   75:}
------------------
test_multiplication:
------------------
test_multiplication:
------------------
        1:   76:void test_division(void) {
        1:   77:  TEST_ASSERT_EQUAL(2,division(&testcal));
        1:   78:  TEST_ASSERT_EQUAL(1,division(&testcal1));
        1:   79:}
------------------
test_division:
------------------
test_division:
------------------
        -:   80:/*division when divisor is 0 */
        1:   81:void test_division_byZero(void){
        1:   82:   TEST_ASSERT_EQUAL(-1, division(&testdiv0));
        1:   83:}
------------------
test_division_byZero:
------------------
test_division_byZero:
------------------
        1:   84:void test_power(void) {
        1:   85:  TEST_ASSERT_EQUAL(100000,power(&testcal));
        1:   86:   TEST_ASSERT_EQUAL(9,power(&testcal1));
        1:   87:}
------------------
test_power:
------------------
test_power:
------------------
        1:   88:void test_root(void) {
        1:   89:  TEST_ASSERT_EQUAL(2,squareroot(&testo));
        1:   90:  TEST_ASSERT_EQUAL(2.449,squareroot(&testo1));
        1:   91:}
------------------
test_root:
------------------
test_root:
------------------
        1:   92:void test_factorial(void) {
        1:   93:  TEST_ASSERT_EQUAL(24,factorial(&testo));
        1:   94:  TEST_ASSERT_EQUAL(720,factorial(&testo1));
        1:   95:}
------------------
test_factorial:
------------------
test_factorial:
------------------
        1:   96:void test_exponent(void) {
        1:   97:  TEST_ASSERT_EQUAL(54.598,exponent(&testo));
        1:   98:   TEST_ASSERT_EQUAL(403.428,exponent(&testo1));
        1:   99:}
------------------
test_exponent:
------------------
test_exponent:
------------------
        1:  100:void test_sine(void) {
        1:  101:  TEST_ASSERT_EQUAL(-0.756,sine(&testo));
        1:  102:  TEST_ASSERT_EQUAL(-0.279,sine(&testo1));
        1:  103:}
------------------
test_sine:
------------------
test_sine:
------------------
        1:  104:void test_cosine(void) {
        1:  105:  TEST_ASSERT_EQUAL(-0.653,cosine(&testo));
        1:  106:  TEST_ASSERT_EQUAL(-0.960,cosine(&testo1));
        1:  107:}
------------------
test_cosine:
------------------
test_cosine:
------------------
        1:  108:void test_ttan(void) {
        1:  109:  TEST_ASSERT_EQUAL(1.157,ttan(&testo));
        1:  110:   TEST_ASSERT_EQUAL(-0.291,ttan(&testo1));
        1:  111:}
------------------
test_ttan:
------------------
test_ttan:
------------------
        1:  112:void test_sec(void) {
        1:  113:  TEST_ASSERT_EQUAL(-1.529,sec(&testo));
        1:  114:   TEST_ASSERT_EQUAL(1.414,sec(&testo1));
        1:  115:}
------------------
test_sec:
------------------
test_sec:
------------------
        1:  116:void test_cot(void) {
        1:  117:  TEST_ASSERT_EQUAL(0.863,cot(&testo));
        1:  118:  TEST_ASSERT_EQUAL(-3.463,cot(&testo1));
        1:  119:}
------------------
test_cot:
------------------
test_cot:
------------------
        1:  120:void test_cosec(void) {
        1:  121:  TEST_ASSERT_EQUAL(-1.321,cosec(&testo));
        1:  122:   TEST_ASSERT_EQUAL(-3.578,cosec(&testo1));
        1:  123:}
------------------
test_cosec:
------------------
test_cosec:
------------------
        -:  124:
        -:  125:/*factorial of 0*/
        1:  126:void test_zero_factorial(void)
        -:  127:{
        1:  128:  TEST_ASSERT_EQUAL(1, factorial(&testf1));
        1:  129:}
------------------
test_zero_factorial:
------------------
test_zero_factorial:
------------------
        -:  130:
        -:  131:/*factorial of negative numbers */
        1:  132:void test_negative_factorial(void)
        -:  133:{
        1:  134:  TEST_ASSERT_EQUAL(-1, factorial(&testf2));
        1:  135:}
------------------
test_negative_factorial:
------------------
test_negative_factorial:
------------------
